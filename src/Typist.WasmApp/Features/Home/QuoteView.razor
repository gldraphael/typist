@inject EventBus EventBus
@implements IDisposable

@if (Quote is not null)
{
<div class="px-12 py-4 bg-green-100 rounded-t-lg w-full flex place-items-center">
    <span class="flex-grow text-xl"><span class="text-gray-500 font-bold">Accuracy:</span> @((_accuracy * 100).ToString("0.##"))%</span>
    <span class="text-4xl">@NetWpm wpm</span>
</div>
}


<div class="p-12 bg-white rounded-b-lg">
    @if (Quote is not null)
    {
        <div class="text-2xl">
            @foreach (var c in _characters)
            {
                string aClass = c.State switch
                {
                    CharState.Right => "bg-green-200",
                    CharState.Wrong => "bg-red-200",
                    _ => string.Empty
                };

                <span class="@aClass">@c.Character</span>
            }
        </div>
        <p class="text-right text-gray-500">@Quote.Author</p>
        <p class="text-right text-gray-300">@Quote.Source &middot; @Quote.Year</p>
    }
    else
    {
        <div>Loading...</div>
    }
</div>




@code {
    private Quote? _quote;
    private ViewChar[] _characters = new ViewChar[0];
    private int index = 0;

    private float _accuracy = 1f;
    private float _accuracyHitPerCharacter = 0f; // accuracy hit a wrong character would take

    private bool _isComplete = false;

    private DateTime? _startTime;
    private DateTime? _endTime;
    private int NetWpm => GetNetWpm();

    [Parameter] public Quote? Quote
    {
        get => _quote;
        set { _quote = value; ResetViewCharacters(); }
    }


    public void OnTextInput(string text)
    {
        if (_isComplete) return;

        foreach(var c in text)
        {
            if (_characters[index].Character == c)
            {
                _characters[index].State = CharState.Right;
            }
            else
            {
                _characters[index].State = CharState.Wrong;
                _accuracy -= _accuracyHitPerCharacter;
            }

            index++;
            if (_startTime is null) _startTime = DateTime.UtcNow;
            _endTime = DateTime.UtcNow;
            if (index == _characters.Length)
            {
                _isComplete = true;
                break;
            }
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        EventBus.OnTextInput += OnTextInput;
    }

    private void ResetViewCharacters()
    {
        if (_quote is null) return;
        _characters = _quote.Text.ToCharArray().Select(c => new ViewChar(c)).ToArray();
        _accuracyHitPerCharacter = 1f / _characters.Length;
    }

    public void Dispose()
    {
        EventBus.OnTextInput -= OnTextInput;
    }

    private int GetNetWpm()
    {
        const int AVG_WORD_LENGTH = 5;

        if (_startTime is null) return 0;

        var charactersOfInterest = _characters.Where(c => c.State is not CharState.Empty);
        if (!charactersOfInterest.Any()) return 0;

        var currentTime = _endTime ?? DateTime.UtcNow;
        var wpm = (int)Math.Ceiling((charactersOfInterest.Count() / AVG_WORD_LENGTH) / (currentTime - _startTime.Value).TotalMinutes);
        return wpm <= 0 ? 0 : wpm;
    }

    private record ViewChar(char Character)
    {
        public CharState State { get; set; } = CharState.Empty;
    }
    private enum CharState { Empty, Right, Wrong }
}
